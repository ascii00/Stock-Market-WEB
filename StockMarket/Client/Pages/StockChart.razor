@page "/stockchart/{Ticker}"
@using StockMarket.Shared.Models
@using Newtonsoft.Json
@using System.Text
@inject HttpClient Http;
@attribute [Authorize]
@layout MainLayout

<br/>
@if (_stockChartDetails == null || _stockChartInfo == null)
{
    <div class="LoaderClass">
        Loading...
    </div>
}
else
{
    @if (_stockChartDetails.Length == 0 || _stockChartInfo.Name == null)
    {
        <p>You use a free version of polygon.io API, therefore you have only 5 API calls/minute</p>
        <p>Please wait a little bit...</p>
    }
    else
    {
        <div class="StockInfo_main">
            <img class="StockChart_leftPart" src="@_stockChartInfo.LogoUrl" alt="there is no image on server">
            <div class="StockChart_centerPart">
                <p class="StockChart_name">@_stockChartInfo.Name</p>
                <p class="StockChart_address">@_stockChartInfo.Address</p>
                <a class="StockChart_link" href="https://@_stockChartInfo.HomePage">@_stockChartInfo.HomePage</a>
            </div>
            <div class="StockChart_rightPart">
                <p>@_stockChartInfo.Description</p></div>
        </div>

        <hr/>
        <div stockchart__center>
            
            <div class="stockchart__selectBox @_visibilitySelectBoxDay">
                <p class="stockchart__p">Timespan:</p>
                <select class="stockchart__select" name="tickers" id="tickers">
                    <option class="stockchart__option" value="Day" @onclick="@(_ => ChangeTimeSpan("day"))">Day</option>
                    <option class="stockchart__option" value="Minute" @onclick="@(_ => ChangeTimeSpan("minute"))">Minute</option>
                </select>
            </div>

            <div class="stockchart__selectBox @_visibilitySelectBoxMinute">
                <p class="stockchart__p">Timespan:</p>
                <select class="stockchart__select" name="tickers" id="tickers">
                    <option class="stockchart__option" value="Minute" @onclick="@(_ => ChangeTimeSpan("minute"))">Minute</option>
                    <option class="stockchart__option" value="Day" @onclick="@(_ => ChangeTimeSpan("day"))">Day</option>
                </select>
            </div>

            <div class="stockchart__daily">
                <p><b>Open:</b> @_stockChartDetails[^1].Open$"</p>
                <P><b>Close:</b> @_stockChartDetails[^1].Close$"</P>
                <P><b>High:</b> @_stockChartDetails[^1].High$"</P>
                <P><b>Low:</b> @_stockChartDetails[^1].Low$"</P>
            </div>

        </div>
        
        
        
        <div id="ControlRegion" class="@_visibilityStockChartDay">

            <SfStockChart Title="Stock Price" Theme="Theme.Fluent" EnablePeriodSelector="true" EnableSelector="true">
                <StockChartCrosshairSettings Enable="true" LineType="LineType.Vertical"></StockChartCrosshairSettings>
                <StockChartTooltipSettings Enable="true" Shared="true" Format="${point.x} : ${point.y}"></StockChartTooltipSettings>
                <StockChartSeriesCollection>
                    <StockChartSeries DataSource="@_stockChartDetails" Type="ChartSeriesType.Candle" XName="Date" YName="Open"
                                      High="High" Low="Low" Open="Open" Close="Close" Volume="Volume" Name="@_ticker">
                    </StockChartSeries>
                </StockChartSeriesCollection>
            </SfStockChart>

        </div>
        
        <div id="ControlRegion" class="@_visibilityStockChartMinute">
        
            <SfStockChart Title="Stock Price" Theme="Theme.Fluent" EnablePeriodSelector="true" EnableSelector="true">
                <StockChartPeriods>
                    <StockChartPeriod IntervalType=RangeIntervalType.Minutes Interval="5" Text='5m'></StockChartPeriod>
                    <StockChartPeriod IntervalType=RangeIntervalType.Minutes Interval="30" Text='30m'></StockChartPeriod>
                    <StockChartPeriod IntervalType=RangeIntervalType.Hours Interval="1" Text='1h'></StockChartPeriod>
                    <StockChartPeriod IntervalType=RangeIntervalType.Hours Interval="12" Text='12h' Selected="true"></StockChartPeriod>
                    <StockChartPeriod Text="1D"></StockChartPeriod>
                 </StockChartPeriods>
                <StockChartCrosshairSettings Enable="true" LineType="LineType.Vertical"></StockChartCrosshairSettings>
                <StockChartTooltipSettings Enable="true" Shared="true" Format="${point.x} : ${point.y}"></StockChartTooltipSettings>
                <StockChartSeriesCollection>
                    <StockChartSeries DataSource="@_stockChartDetails" Type="ChartSeriesType.Candle" XName="Date" YName="Open"
                                      High="High" Low="Low" Open="Open" Close="Close" Volume="Volume" Name="@_ticker">
                    </StockChartSeries>
                </StockChartSeriesCollection>
            </SfStockChart>
        
        </div>
        
        <div class="stockchart__form-group">
            <span class="stockchart__btn stockchart__btn-primary @_visibilityFavouritesButtonAdd" @onclick="AddToFavourites">Add to favourites</span>
        </div>
        
        <div class="stockchart__form-group">
            <span class="stockchart__btn stockchart__btn-primary @_visibilityFavouritesButtonRemove" @onclick="RemoveFromFavourites">Remove from favourites</span>
        </div>
    }
}

@code {
    [Parameter] public string Ticker{ get; set; }
    private StockChartData[] _stockChartDetails;
    private StockChartInfo _stockChartInfo;
    private string _ticker;
    private string _timeSpan = "day";
    
    private string _visibilityFavouritesButtonAdd = "stockchart__btn_visibility_none";
    private string _visibilityFavouritesButtonRemove = "stockchart__btn_visibility_none";
    
    private string _visibilityStockChartDay = "stockchart__btn_visibility_enable";
    private string _visibilityStockChartMinute = "stockchart__btn_visibility_none";
    
    private string _visibilitySelectBoxDay = "stockchart__btn_visibility_enable";
    private string _visibilitySelectBoxMinute = "stockchart__btn_visibility_none";

    protected override async Task OnInitializedAsync()
    {
        _visibilityStockChartDay = "stockchart__btn_visibility_enable";
        _visibilityStockChartMinute = "stockchart__btn_visibility_none";
        
        _visibilitySelectBoxDay = "stockchart__btn_visibility_enable";
        _visibilitySelectBoxMinute = "stockchart__btn_visibility_none";
        
        _timeSpan = "day";
        _ticker = Ticker;
        _stockChartDetails = await GetAllElements("day");
        _stockChartInfo = await GeInfo();
        await CheckOnFavourites();
    }
    
    protected override async Task OnParametersSetAsync()
    {
        if (Ticker != _ticker)
        {
            _visibilityStockChartDay = "stockchart__btn_visibility_enable";
            _visibilityStockChartMinute = "stockchart__btn_visibility_none";
            
            _visibilitySelectBoxDay = "stockchart__btn_visibility_enable";
            _visibilitySelectBoxMinute = "stockchart__btn_visibility_none";
            
            _ticker = Ticker;
            _stockChartDetails = null;
            _stockChartInfo = null;
            _stockChartDetails = await GetAllElements("day");
            _stockChartInfo = await GeInfo();
            await CheckOnFavourites();
        }
    }

    private async Task ChangeTimeSpan(string time)
    {
        if (_timeSpan != time)
        {
            if (_visibilityStockChartDay == "stockchart__btn_visibility_none")
            {
                _visibilityStockChartDay = "stockchart__btn_visibility_enable";
                _visibilityStockChartMinute = "stockchart__btn_visibility_none";
                
                _visibilitySelectBoxDay = "stockchart__btn_visibility_enable";
                _visibilitySelectBoxMinute = "stockchart__btn_visibility_none";
            }
            else
            {
                _visibilityStockChartDay = "stockchart__btn_visibility_none";
                _visibilityStockChartMinute = "stockchart__btn_visibility_enable";
                
                _visibilitySelectBoxDay = "stockchart__btn_visibility_none";
                _visibilitySelectBoxMinute = "stockchart__btn_visibility_enable";
            }
            _timeSpan = time;
            _stockChartDetails = null;
            _stockChartInfo = null;
            _stockChartDetails = await GetAllElements(time);
            _stockChartInfo = await GeInfo();
            await CheckOnFavourites();
        }
    }

    private async Task<StockChartData[]> GetAllElements(string time)
    {
        return await Http.GetJsonAsync<StockChartData[]>($"api/StockChart/{Ticker}:{time}");
    }

    private async Task<StockChartInfo> GeInfo()
    {
        return await Http.GetJsonAsync<StockChartInfo>($"api/StockInfo/{Ticker}");
    }

    private async Task AddToFavourites()
    {
        var json = JsonConvert.SerializeObject(_stockChartInfo);
        var data = new StringContent(json, Encoding.UTF8, "application/json");
        var response = await Http.PostAsync($"api/FavouritesCompany/Add", data);
        var result = await response.Content.ReadAsStringAsync();
        if (result == "Error during communication with database.")
        {
            _visibilityFavouritesButtonAdd = "stockchart__btn_visibility_none";
            _visibilityFavouritesButtonRemove = "stockchart__btn_visibility_none";
        }
        else
        {
            _visibilityFavouritesButtonAdd = "stockchart__btn_visibility_none";
            _visibilityFavouritesButtonRemove = "stockchart__btn_visibility_enable";
        }
    }
    
    private async Task RemoveFromFavourites()
    {
        var json = JsonConvert.SerializeObject(_stockChartInfo);
        var data = new StringContent(json, Encoding.UTF8, "application/json");
        var response = await Http.PostAsync($"api/FavouritesCompany/Remove", data);
        var result = await response.Content.ReadAsStringAsync();
        if (result == "Error during communication with database.")
        {
            _visibilityFavouritesButtonAdd = "stockchart__btn_visibility_none";
            _visibilityFavouritesButtonRemove = "stockchart__btn_visibility_none";
        }
        else
        {
            _visibilityFavouritesButtonAdd = "stockchart__btn_visibility_enable";
            _visibilityFavouritesButtonRemove = "stockchart__btn_visibility_none";
        }
    }

    private async Task CheckOnFavourites()
    {
        var json = JsonConvert.SerializeObject(_stockChartInfo);
        var data = new StringContent(json, Encoding.UTF8, "application/json");
        var response = await Http.PostAsync($"api/FavouritesCompany/Check", data);
        var result = await response.Content.ReadAsStringAsync();

        switch (result)
        {
            case "true":
                _visibilityFavouritesButtonAdd = "stockchart__btn_visibility_none";
                _visibilityFavouritesButtonRemove = "stockchart__btn_visibility_enable";
                break;
            case "false":
                _visibilityFavouritesButtonAdd = "stockchart__btn_visibility_enable";
                _visibilityFavouritesButtonRemove = "stockchart__btn_visibility_none";
                break;
            default:
                _visibilityFavouritesButtonAdd = "stockchart__btn_visibility_none";
                _visibilityFavouritesButtonRemove = "stockchart__btn_visibility_none";
                break;
        }
    }
}
